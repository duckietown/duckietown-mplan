from worker_base import WorkerBase


class WorkerTemplate(WorkerBase):
    """
    Template for a worker object. DO NOT EDIT THIS FILE! COPY IT!
    """

    def __init__(self, standalone=True, frequency=-1):
        """
        Call constructor method from base class.
        It should not be necessary to add any code here... add all concerning
        cleaning and shutting down in shutdown method.
        """
        super(WorkerTemplate, self).__init__(standalone, frequency)

    def __del__(self):
        """
        Call destructor method from base class.
        It should not be necessary to add any code here... add all concerning
        cleaning and shutting down in shutdown method.
        """
        super(WorkerTemplate, self).__del__()

    def init(self):
        """
        Initialise all members of class.

        Parameters
        ----------
        none

        Returns
        -------
        none
        """
        # add your code here...
        pass

    def initIO(self):
        """
        Instantiate all input / output behaviour of worker. This mainly
        includes ros-publishers / -subscribers and advertised services.

        Parameters
        ----------
        none

        Returns
        -------
        none
        """
        # add your code here...
        pass

    def advance(self, Ts=1.0):
        """
        Main method where data is processed and output generated. Gets called
        once in every loop with frequency self.frequency.

        Parameters
        ----------
        Ts : double, optional
            The time in seconds since the advance method was executed the last time

        Returns
        -------
        none
        """
        # add your code here...
        pass

    def shutdown(self):
        """
        Clean up class before process end.

        Parameters
        ----------
        none

        Returns
        -------
        none
        """
        # add your code here...
        pass
